openapi: 3.1.0
info:
  title: 'Banking API'
  version: 1.0.0
  description: 'API for managing banking users, accounts, and payments'
servers:
  -
    url: /api/v1
components:
  schemas:
    User:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          description: 'Unique user identifier'
        firstName:
          type: string
          description: 'User''s first name'
        lastName:
          type: string
          description: 'User''s last name'
        email:
          type: string
          format: email
          description: 'User''s email address'
        dateOfBirth:
          type: string
          description: 'User''s date of birth'
        address:
          type: object
          properties:
            street:
              type: string
              description: 'Street address'
            city:
              type: string
              description: 'City name'
            country:
              type: string
              description: 'Country name'
            postalCode:
              type: string
              description: 'Postal code'
          required:
            - street
            - city
            - country
            - postalCode
      required:
        - userId
        - firstName
        - lastName
        - email
        - dateOfBirth
        - address
    Account:
      type: object
      properties:
        accountId:
          type: string
          format: uuid
          description: 'Unique account identifier'
        accountNumber:
          type: string
          description: 'Account number'
        userId:
          type: string
          format: uuid
          description: 'Owner''s user ID'
        balance:
          type: number
          description: 'Current balance'
        status:
          type: string
          enum:
            - active
            - inactive
            - closed
          description: 'Account status'
        createdAt:
          type: string
          description: 'Account creation timestamp'
      required:
        - accountId
        - accountNumber
        - userId
        - balance
        - status
        - createdAt
    Payment:
      type: object
      properties:
        paymentId:
          type: string
          format: uuid
          description: 'Unique payment identifier'
        amount:
          type: number
          description: 'Payment amount'
        fromAccount:
          type: string
          format: uuid
          description: 'Source account ID'
        toAccount:
          type: string
          format: uuid
          description: 'Destination account ID'
        status:
          type: string
          enum:
            - pending
            - completed
            - failed
          description: 'Payment status'
        transactionDate:
          type: string
          description: 'Transaction timestamp'
      required:
        - paymentId
        - amount
        - fromAccount
        - toAccount
        - status
        - transactionDate
  parameters: {}
paths:
  /users:
    post:
      description: 'Create a new user'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: 'User''s first name'
                lastName:
                  type: string
                  description: 'User''s last name'
                email:
                  type: string
                  format: email
                  description: 'User''s email address'
                dateOfBirth:
                  type: string
                  description: 'User''s date of birth'
                address:
                  type: object
                  properties: {street: {type: string, description: 'Street address'}, city: {type: string, description: 'City name'}, country: {type: string, description: 'Country name'}, postalCode: {type: string, description: 'Postal code'}}
                  required: [street, city, country, postalCode]
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
                - address
      responses:
        '201':
          description: 'User created successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId: {type: string}
                required:
                  - userId
    get:
      description: 'Get all users'
      responses:
        '200':
          description: 'List of users'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: {userId: {type: string, format: uuid, description: 'Unique user identifier'}, firstName: {type: string, description: 'User''s first name'}, lastName: {type: string, description: 'User''s last name'}, email: {type: string, format: email, description: 'User''s email address'}, dateOfBirth: {type: string, description: 'User''s date of birth'}, address: {type: object, properties: {street: {type: string, description: 'Street address'}, city: {type: string, description: 'City name'}, country: {type: string, description: 'Country name'}, postalCode: {type: string, description: 'Postal code'}}, required: [street, city, country, postalCode]}}
                  required: [userId, firstName, lastName, email, dateOfBirth, address]
  '/users/{userId}':
    get:
      description: 'Get user by ID'
      parameters:
        -
          schema:
            type: string
            format: uuid
          required: true
          name: userId
          in: path
      responses:
        '200':
          description: 'User found'
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId: {type: string, format: uuid, description: 'Unique user identifier'}
                  firstName: {type: string, description: 'User''s first name'}
                  lastName: {type: string, description: 'User''s last name'}
                  email: {type: string, format: email, description: 'User''s email address'}
                  dateOfBirth: {type: string, description: 'User''s date of birth'}
                  address: {type: object, properties: {street: {type: string, description: 'Street address'}, city: {type: string, description: 'City name'}, country: {type: string, description: 'Country name'}, postalCode: {type: string, description: 'Postal code'}}, required: [street, city, country, postalCode]}
                required:
                  - userId
                  - firstName
                  - lastName
                  - email
                  - dateOfBirth
                  - address
    put:
      description: 'Update user details'
      parameters:
        -
          schema:
            type: string
            format: uuid
          required: true
          name: userId
          in: path
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: 'User''s first name'
                lastName:
                  type: string
                  description: 'User''s last name'
                email:
                  type: string
                  format: email
                  description: 'User''s email address'
                dateOfBirth:
                  type: string
                  description: 'User''s date of birth'
                address:
                  type: object
                  properties: {street: {type: string, description: 'Street address'}, city: {type: string, description: 'City name'}, country: {type: string, description: 'Country name'}, postalCode: {type: string, description: 'Postal code'}}
                  required: [street, city, country, postalCode]
      responses:
        '200':
          description: 'User updated successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, enum: [updated]}
                required:
                  - status
    delete:
      description: 'Delete user'
      parameters:
        -
          schema:
            type: string
            format: uuid
          required: true
          name: userId
          in: path
      responses:
        '200':
          description: 'User deleted successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, enum: [deleted]}
                required:
                  - status
  '/users/{userId}/payments':
    get:
      description: 'Get user''s payment history'
      parameters:
        -
          schema:
            type: string
            format: uuid
          required: true
          name: userId
          in: path
      responses:
        '200':
          description: 'List of user''s payments'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: {paymentId: {type: string, format: uuid, description: 'Unique payment identifier'}, amount: {type: number, description: 'Payment amount'}, fromAccount: {type: string, format: uuid, description: 'Source account ID'}, toAccount: {type: string, format: uuid, description: 'Destination account ID'}, status: {type: string, enum: [pending, completed, failed], description: 'Payment status'}, transactionDate: {type: string, description: 'Transaction timestamp'}}
                  required: [paymentId, amount, fromAccount, toAccount, status, transactionDate]
  '/users/{userId}/accounts':
    get:
      description: 'Get user''s accounts'
      parameters:
        -
          schema:
            type: string
            format: uuid
          required: true
          name: userId
          in: path
      responses:
        '200':
          description: 'List of user''s accounts'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: {accountId: {type: string, format: uuid, description: 'Unique account identifier'}, accountNumber: {type: string, description: 'Account number'}, userId: {type: string, format: uuid, description: 'Owner''s user ID'}, balance: {type: number, description: 'Current balance'}, status: {type: string, enum: [active, inactive, closed], description: 'Account status'}, createdAt: {type: string, description: 'Account creation timestamp'}}
                  required: [accountId, accountNumber, userId, balance, status, createdAt]
  /users/generate:
    post:
      description: 'Generate dummy user data'
      responses:
        '201':
          description: 'Dummy user created successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId: {type: string, format: uuid, description: 'Unique user identifier'}
                  firstName: {type: string, description: 'User''s first name'}
                  lastName: {type: string, description: 'User''s last name'}
                  email: {type: string, format: email, description: 'User''s email address'}
                  dateOfBirth: {type: string, description: 'User''s date of birth'}
                  address: {type: object, properties: {street: {type: string, description: 'Street address'}, city: {type: string, description: 'City name'}, country: {type: string, description: 'Country name'}, postalCode: {type: string, description: 'Postal code'}}, required: [street, city, country, postalCode]}
                  status: {type: string, enum: [created]}
                required:
                  - userId
                  - firstName
                  - lastName
                  - email
                  - dateOfBirth
                  - address
                  - status
  /accounts:
    post:
      description: 'Create a new account'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  format: uuid
                balance:
                  type: number
              required:
                - userId
      responses:
        '201':
          description: 'Account created successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  accountId: {type: string, format: uuid, description: 'Unique account identifier'}
                  accountNumber: {type: string, description: 'Account number'}
                  userId: {type: string, format: uuid, description: 'Owner''s user ID'}
                  balance: {type: number, description: 'Current balance'}
                  status: {type: string, enum: [active, inactive, closed], description: 'Account status'}
                  createdAt: {type: string, description: 'Account creation timestamp'}
                required:
                  - accountId
                  - accountNumber
                  - userId
                  - balance
                  - status
                  - createdAt
  '/accounts/{accountId}':
    get:
      description: 'Get account by ID'
      parameters:
        -
          schema:
            type: string
            format: uuid
          required: true
          name: accountId
          in: path
      responses:
        '200':
          description: 'Account found'
          content:
            application/json:
              schema:
                type: object
                properties:
                  accountId: {type: string, format: uuid, description: 'Unique account identifier'}
                  accountNumber: {type: string, description: 'Account number'}
                  userId: {type: string, format: uuid, description: 'Owner''s user ID'}
                  balance: {type: number, description: 'Current balance'}
                  status: {type: string, enum: [active, inactive, closed], description: 'Account status'}
                  createdAt: {type: string, description: 'Account creation timestamp'}
                required:
                  - accountId
                  - accountNumber
                  - userId
                  - balance
                  - status
                  - createdAt
    put:
      description: 'Update account details'
      parameters:
        -
          schema:
            type: string
            format: uuid
          required: true
          name: accountId
          in: path
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [active, inactive, closed]
              required:
                - status
      responses:
        '200':
          description: 'Account updated successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string}
                  message: {type: string}
                required:
                  - status
                  - message
    delete:
      description: 'Close account'
      parameters:
        -
          schema:
            type: string
            format: uuid
          required: true
          name: accountId
          in: path
      responses:
        '200':
          description: 'Account closed successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, enum: [closed]}
                  message: {type: string}
                required:
                  - status
                  - message
  '/accounts/user/{userId}':
    get:
      description: 'Get user''s accounts'
      parameters:
        -
          schema:
            type: string
            format: uuid
          required: true
          name: userId
          in: path
      responses:
        '200':
          description: 'List of user''s accounts'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: {accountId: {type: string, format: uuid, description: 'Unique account identifier'}, accountNumber: {type: string, description: 'Account number'}, userId: {type: string, format: uuid, description: 'Owner''s user ID'}, balance: {type: number, description: 'Current balance'}, status: {type: string, enum: [active, inactive, closed], description: 'Account status'}, createdAt: {type: string, description: 'Account creation timestamp'}}
                  required: [accountId, accountNumber, userId, balance, status, createdAt]
  /payments:
    post:
      description: 'Create a new payment'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                fromAccount:
                  type: string
                  format: uuid
                toAccount:
                  type: string
                  format: uuid
                transactionDate:
                  type: string
              required:
                - amount
                - fromAccount
                - toAccount
                - transactionDate
      responses:
        '201':
          description: 'Payment created successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  paymentId: {type: string, format: uuid, description: 'Unique payment identifier'}
                  amount: {type: number, description: 'Payment amount'}
                  fromAccount: {type: string, format: uuid, description: 'Source account ID'}
                  toAccount: {type: string, format: uuid, description: 'Destination account ID'}
                  status: {type: string, enum: [pending, completed, failed], description: 'Payment status'}
                  transactionDate: {type: string, description: 'Transaction timestamp'}
                required:
                  - paymentId
                  - amount
                  - fromAccount
                  - toAccount
                  - status
                  - transactionDate
    get:
      description: 'Get all payments'
      responses:
        '200':
          description: 'List of payments'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: {paymentId: {type: string, format: uuid, description: 'Unique payment identifier'}, amount: {type: number, description: 'Payment amount'}, fromAccount: {type: string, format: uuid, description: 'Source account ID'}, toAccount: {type: string, format: uuid, description: 'Destination account ID'}, status: {type: string, enum: [pending, completed, failed], description: 'Payment status'}, transactionDate: {type: string, description: 'Transaction timestamp'}}
                  required: [paymentId, amount, fromAccount, toAccount, status, transactionDate]
  '/payments/{paymentId}':
    get:
      description: 'Get payment by ID'
      parameters:
        -
          schema:
            type: string
            format: uuid
          required: true
          name: paymentId
          in: path
      responses:
        '200':
          description: 'Payment found'
          content:
            application/json:
              schema:
                type: object
                properties:
                  paymentId: {type: string, format: uuid, description: 'Unique payment identifier'}
                  amount: {type: number, description: 'Payment amount'}
                  fromAccount: {type: string, format: uuid, description: 'Source account ID'}
                  toAccount: {type: string, format: uuid, description: 'Destination account ID'}
                  status: {type: string, enum: [pending, completed, failed], description: 'Payment status'}
                  transactionDate: {type: string, description: 'Transaction timestamp'}
                required:
                  - paymentId
                  - amount
                  - fromAccount
                  - toAccount
                  - status
                  - transactionDate
    put:
      description: 'Update payment details'
      parameters:
        -
          schema:
            type: string
            format: uuid
          required: true
          name: paymentId
          in: path
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  description: 'Payment amount'
                fromAccount:
                  type: string
                  format: uuid
                  description: 'Source account ID'
                toAccount:
                  type: string
                  format: uuid
                  description: 'Destination account ID'
                status:
                  type: string
                  enum: [pending, completed, failed]
                  description: 'Payment status'
                transactionDate:
                  type: string
                  description: 'Transaction timestamp'
      responses:
        '200':
          description: 'Payment updated successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string}
                required:
                  - message
    delete:
      description: 'Delete payment'
      parameters:
        -
          schema:
            type: string
            format: uuid
          required: true
          name: paymentId
          in: path
      responses:
        '200':
          description: 'Payment deleted successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: {type: string}
                required:
                  - message
