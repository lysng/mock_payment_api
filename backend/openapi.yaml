openapi: 3.0.0
info:
  title: Banking API
  version: 1.0.0
  description: API for managing banking users, accounts, and payments

servers:
  - url: /api/v1

components:
  schemas:
    User:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
        address:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            country:
              type: string
            postalCode:
              type: string
          required:
            - street
            - city
            - country
            - postalCode
      required:
        - firstName
        - lastName
        - email
        - dateOfBirth
        - address
    
    Account:
      type: object
      properties:
        accountId:
          type: string
          format: uuid
        accountNumber:
          type: string
        userId:
          type: string
          format: uuid
        balance:
          type: number
          default: 0
        status:
          type: string
          enum: [active, closed]
          default: active
        createdAt:
          type: string
          format: date-time
      required:
        - userId

    Payment:
      type: object
      properties:
        paymentId:
          type: string
          format: uuid
        amount:
          type: number
        fromAccount:
          type: string
          format: uuid
        toAccount:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, completed, failed]
          default: pending
        transactionDate:
          type: string
          format: date-time
      required:
        - amount
        - fromAccount
        - toAccount

paths:
  /users:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    format: uuid
                  status:
                    type: string
        '500':
          description: Server error
    
    get:
      summary: Get all users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Server error

  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      summary: Get user by ID
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Server error
    
    put:
      summary: Update user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '404':
          description: User not found
        '500':
          description: Server error
    
    delete:
      summary: Delete user
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '404':
          description: User not found
        '500':
          description: Server error

  /users/{userId}/payments:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get user's payments
      responses:
        '200':
          description: List of user's payments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
        '500':
          description: Server error

  /users/{userId}/accounts:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get user's accounts
      responses:
        '200':
          description: List of user's accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '500':
          description: Server error

  /accounts:
    post:
      summary: Create new account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '201':
          description: Account created
          content:
            application/json:
              schema:
                type: object
                properties:
                  accountId:
                    type: string
                    format: uuid
                  accountNumber:
                    type: string
                  status:
                    type: string
        '500':
          description: Server error

  /accounts/{accountId}:
    parameters:
      - name: accountId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      summary: Get account by ID
      responses:
        '200':
          description: Account found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '404':
          description: Account not found
        '500':
          description: Server error
    
    put:
      summary: Update account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '200':
          description: Account updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '500':
          description: Server error
    
    delete:
      summary: Close account
      responses:
        '200':
          description: Account closed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  closureDate:
                    type: string
                    format: date-time
        '500':
          description: Server error

  /payments:
    post:
      summary: Create new payment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
      responses:
        '201':
          description: Payment created
          content:
            application/json:
              schema:
                type: object
                properties:
                  paymentId:
                    type: string
                    format: uuid
                  status:
                    type: string
                  transactionDate:
                    type: string
                    format: date-time
        '500':
          description: Server error
    
    get:
      summary: Get all payments
      responses:
        '200':
          description: List of payments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
        '500':
          description: Server error

  /payments/{paymentId}:
    parameters:
      - name: paymentId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      summary: Get payment by ID
      responses:
        '200':
          description: Payment found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '404':
          description: Payment not found
        '500':
          description: Server error
    
    put:
      summary: Update payment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
      responses:
        '200':
          description: Payment updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error
    
    delete:
      summary: Delete payment
      responses:
        '200':
          description: Payment deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Server error 